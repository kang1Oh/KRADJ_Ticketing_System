/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package SSTFSimulation;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Janey
 */
public class SSTFMainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    public SSTFMainJFrame() {
        initComponents();
        
        noOfPassengers.setBackground(new Color(0,0,0,0));
        firstTicket.setBackground(new Color(0,0,0,0));
        jScrollPane.setOpaque(false);
        jScrollPane.getViewport().setOpaque(false);
        jScrollPane.setBorder(null);
        jScrollPane.setViewportBorder(null);
        jScrollPane1.setOpaque(false);
        jScrollPane1.getViewport().setOpaque(false);
        jScrollPane1.setBorder(null);
        jScrollPane1.setViewportBorder(null);

        requests.setBorder(null);
        requests.setBackground(new Color(0,0,0,0));
        queue.setBorder(null);
        queue.setBackground(new Color(0,0,0,0));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Menu = new javax.swing.JPanel();
        requestBtn = new javax.swing.JButton();
        queueBtn = new javax.swing.JButton();
        aboutBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Parent = new javax.swing.JPanel();
        Requests = new javax.swing.JPanel();
        noOfPassengers = new javax.swing.JTextField();
        firstTicket = new javax.swing.JTextField();
        jScrollPane = new javax.swing.JScrollPane();
        requests = new javax.swing.JTextArea();
        startQueueBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        Queue = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        queue = new javax.swing.JTextArea();
        TSeekTime = new javax.swing.JLabel();
        ASeekTime = new javax.swing.JLabel();
        nextQueueBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        About = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Menu.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        requestBtn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        requestBtn.setContentAreaFilled(false);
        requestBtn.setRolloverEnabled(false);
        requestBtn.setSelected(true);
        requestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestBtnActionPerformed(evt);
            }
        });
        Menu.add(requestBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 100, 30));

        queueBtn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        queueBtn.setContentAreaFilled(false);
        queueBtn.setFocusPainted(false);
        queueBtn.setRolloverEnabled(false);
        queueBtn.setSelected(true);
        queueBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queueBtnActionPerformed(evt);
            }
        });
        Menu.add(queueBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 100, 30));

        aboutBtn.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        aboutBtn.setContentAreaFilled(false);
        aboutBtn.setFocusPainted(false);
        aboutBtn.setRolloverEnabled(false);
        aboutBtn.setSelected(true);
        aboutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutBtnActionPerformed(evt);
            }
        });
        Menu.add(aboutBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 100, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/INPUT.png"))); // NOI18N
        Menu.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 230, -1));

        getContentPane().add(Menu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 230, -1));

        Parent.setLayout(new java.awt.CardLayout());

        Requests.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        noOfPassengers.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        noOfPassengers.setForeground(new java.awt.Color(255, 255, 255));
        noOfPassengers.setBorder(null);
        noOfPassengers.setOpaque(false);
        Requests.add(noOfPassengers, new org.netbeans.lib.awtextra.AbsoluteConstraints(525, 60, 58, 15));

        firstTicket.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        firstTicket.setForeground(new java.awt.Color(255, 255, 255));
        firstTicket.setBorder(null);
        firstTicket.setOpaque(false);
        Requests.add(firstTicket, new org.netbeans.lib.awtextra.AbsoluteConstraints(525, 79, 58, 15));

        jScrollPane.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane.setPreferredSize(new java.awt.Dimension(45, 135));

        requests.setColumns(5);
        requests.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        requests.setForeground(new java.awt.Color(255, 255, 255));
        requests.setLineWrap(true);
        requests.setRows(6);
        requests.setTabSize(0);
        requests.setWrapStyleWord(true);
        requests.setBorder(null);
        requests.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        requests.setMinimumSize(new java.awt.Dimension(180, 14));
        requests.setOpaque(false);
        jScrollPane.setViewportView(requests);

        Requests.add(jScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(525, 112, 70, 125));

        startQueueBtn.setBorder(null);
        startQueueBtn.setBorderPainted(false);
        startQueueBtn.setContentAreaFilled(false);
        startQueueBtn.setFocusPainted(false);
        startQueueBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startQueueBtnActionPerformed(evt);
            }
        });
        Requests.add(startQueueBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 250, 200, 30));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/INPUT.png"))); // NOI18N
        Requests.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-230, 0, -1, -1));

        Parent.add(Requests, "card2");

        Queue.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setOpaque(false);

        queue.setEditable(false);
        queue.setColumns(20);
        queue.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        queue.setForeground(new java.awt.Color(255, 255, 255));
        queue.setRows(5);
        queue.setAutoscrolls(false);
        queue.setBorder(null);
        queue.setMargin(new java.awt.Insets(4, 4, 4, 4));
        queue.setOpaque(false);
        jScrollPane1.setViewportView(queue);

        Queue.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(287, 78, 247, 100));

        TSeekTime.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        TSeekTime.setForeground(new java.awt.Color(255, 255, 255));
        Queue.add(TSeekTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(435, 195, 80, 14));

        ASeekTime.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        ASeekTime.setForeground(new java.awt.Color(255, 255, 255));
        Queue.add(ASeekTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(435, 218, 80, 14));

        nextQueueBtn.setBorder(null);
        nextQueueBtn.setBorderPainted(false);
        nextQueueBtn.setContentAreaFilled(false);
        nextQueueBtn.setFocusPainted(false);
        nextQueueBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextQueueBtnActionPerformed(evt);
            }
        });
        Queue.add(nextQueueBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 250, 200, 30));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/OUTPUT.png"))); // NOI18N
        Queue.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(-230, 0, -1, -1));

        Parent.add(Queue, "card3");

        About.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ABOUT.png"))); // NOI18N
        About.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(-230, 0, -1, -1));

        Parent.add(About, "card4");

        getContentPane().add(Parent, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 0, 620, 300));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void requestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestBtnActionPerformed
        // TODO add your handling code here:
        Parent.removeAll();
        Parent.add(Requests);
        Parent.repaint();
        Parent.revalidate();
    }//GEN-LAST:event_requestBtnActionPerformed

    private void queueBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queueBtnActionPerformed
        // TODO add your handling code here:
        Parent.removeAll();
        Parent.add(Queue);
        Parent.repaint();
        Parent.revalidate();
    }//GEN-LAST:event_queueBtnActionPerformed

    private void aboutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutBtnActionPerformed
        // TODO add your handling code here:
        Parent.removeAll();
        Parent.add(About);
        Parent.repaint();
        Parent.revalidate();
    }//GEN-LAST:event_aboutBtnActionPerformed

    private void startQueueBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startQueueBtnActionPerformed
        // TODO add your handling code here:
        
        boolean isSuccessful = true;
        try{
            // User input: number of requests and initial head position
            String numReqs = noOfPassengers.getText();
            int numRequests = Integer.parseInt(numReqs);
            String initialReq = firstTicket.getText();
            int initialPosition = Integer.parseInt(initialReq);
            
            // User input: I/O queue requests
            try{
                String reqs = requests.getText();
                String[] lines = reqs.split("\n");
                int[] ticketRequests = new int[numRequests];
                for (int i = 0; i < numRequests; i++) {
                    ticketRequests[i] = Integer.parseInt(lines[i]);
                }
                int totalSeekTime = 0;
                int currentPosition = initialPosition;
                List<Integer> servedRequests = new ArrayList<>();
                boolean[] visited = new boolean[numRequests];
                Arrays.fill(visited, false);

                for (int i = 0; i < numRequests; i++) {
                    int minDistance = Integer.MAX_VALUE;
                    int minIndex = -1;

                    for (int j = 0; j < numRequests; j++) {
                        if (!visited[j]) {
                            int distance = Math.abs(ticketRequests[j] - currentPosition);
                            if (distance < minDistance) {
                                minDistance = distance;
                                minIndex = j;
                            }
                        }
                    }

                    totalSeekTime += minDistance;
                    currentPosition = ticketRequests[minIndex];
                    visited[minIndex] = true;
                    servedRequests.add(ticketRequests[minIndex]);
                }

                //OUTPUT: Displayed in Queue Window
                String ticketQueue = ""+"Ticket # "+initialPosition+"\n"; //<html>
                for (int request : servedRequests) {
                    ticketQueue += "Ticket # "+request + "\n";
                }
                //ticketQueue += "</html"; 
                queue.setText(ticketQueue);

                TSeekTime.setText(""+totalSeekTime+" ms");
                double averageSeekTime = (double) totalSeekTime / numRequests;
                String oneDecimalAST = String.format("%.1f", averageSeekTime);
                ASeekTime.setText(oneDecimalAST + " ms");

            }catch(ArrayIndexOutOfBoundsException ex){
                JOptionPane.showMessageDialog(null, "Error! Not enough input. Try Again", "An Error Occured", JOptionPane.ERROR_MESSAGE);
                isSuccessful = false;
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Error! Input contains invalid character. Try Again.", "An Error Occurred.", JOptionPane.ERROR_MESSAGE);       
            isSuccessful = false;
        }
        
        if(isSuccessful){
            //when sstf is successful, move to output window
            Parent.removeAll();
            Parent.add(Queue);
            Parent.repaint();
            Parent.revalidate();
        }
    }//GEN-LAST:event_startQueueBtnActionPerformed

    private void nextQueueBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextQueueBtnActionPerformed
        // TODO add your handling code here:
        
        Parent.removeAll();
        Parent.add(Requests);
        Parent.repaint();
        Parent.revalidate();
        
        //reset all text
        noOfPassengers.setText("");
        firstTicket.setText("");
        requests.setText("");
        queue.setText("");
        TSeekTime.setText("");
        ASeekTime.setText("");
    }//GEN-LAST:event_nextQueueBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SSTFMainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SSTFMainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SSTFMainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SSTFMainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SSTFMainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ASeekTime;
    private javax.swing.JPanel About;
    private javax.swing.JPanel Menu;
    private javax.swing.JPanel Parent;
    private javax.swing.JPanel Queue;
    private javax.swing.JPanel Requests;
    private javax.swing.JLabel TSeekTime;
    private javax.swing.JButton aboutBtn;
    private javax.swing.JTextField firstTicket;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton nextQueueBtn;
    private javax.swing.JTextField noOfPassengers;
    private javax.swing.JTextArea queue;
    private javax.swing.JButton queueBtn;
    private javax.swing.JButton requestBtn;
    private javax.swing.JTextArea requests;
    private javax.swing.JButton startQueueBtn;
    // End of variables declaration//GEN-END:variables
}
